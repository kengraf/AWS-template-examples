AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates Cloudwatch logs and export to S3."
 # ----------------------------------------------------------------------------
 # Copyright 2017 Amazon.com, Inc. or its affiliates. 
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
 # You may obtain a copy of the License at
 #
 #    http://www.apache.org/licenses/LICENSE-2.0
 #
 # Unless required by applicable law or agreed to in writing, software
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
 # ----------------------------------------------------------------------------
Parameters: 
  TemplateBucketName:
    Default: yourbucket
    Description: 'S3 bucket name for the CF templates to run- no ''s3:'' at the beginning, nor ''/'' at the end).'
    Type: String
    AllowedPattern: "^([a-z]|(\\d(?!\\d{0,2}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})))([a-z\\d]|(\\.(?!(\\.|-)))|(-(?!\\.))){1,61}[a-z\\d\\.]$"
  TemplateBucketPrefix:
    Default: path/to/zipfilefolder
    Description: 'S3 prefix for the CF templates to run'
    Type: String
    AllowedPattern: "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$"
  TheLogsBucketName: 
    Type: String
    Description: "Name for the logs bucket"
  EC2LogsPrefix:
    Type: String
    Description: "Prefix for EC2 CloudWatch logs in logs bucket"
    Default: cloudwatchlogs/ec2logs 
Resources: 
  EC2Logs: 
      Type: "AWS::Logs::LogGroup"
      Properties: 
       LogGroupName: 
          "Fn::Sub": "${AWS::StackName}-EC2Logs"
      #DeletionPolicy: Retain 
  CWLogsLambdaS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: "/"
  CWEc2LogsLambdaFunction:
    DependsOn: CWLogsLambdaS3Role
    Type: AWS::Lambda::Function
    Description: "Lambda function to read CloudWatch logs and write them to S3"
    Properties:
      Handler: cloudwatch-exportlogs2s3-lambda.lambda_handler
      Role: 
          Fn::GetAtt:
          - CWLogsLambdaS3Role
          - Arn
      Code:
          S3Bucket: 
            Ref: TemplateBucketName
          S3Key:           
            Fn::Join:
            - "/"
            - - Ref: TemplateBucketPrefix
              - cloudwatch-exportlogs2s3-lambda.zip 
      Environment:
        Variables:
          s3BucketName: 
            Ref: TheLogsBucketName 
          s3KeyPrefix:  
            Ref: EC2LogsPrefix
      Runtime: python3.8    
  Ec2LambdaInvokePermission: 
      Type: "AWS::Lambda::Permission"
      DependsOn: CWEc2LogsLambdaFunction  
      Properties: 
        FunctionName: 
          Fn::GetAtt: 
            - "CWEc2LogsLambdaFunction"
            - "Arn"
        Action: "lambda:*"
        Principal: 
            Fn::Join:
            - "."
            - - logs
              - Ref: AWS::Region
              - amazonaws.com 
        SourceAccount: 
          Ref: "AWS::AccountId"
  CWEc2LogsSubscription:      
    Type: "AWS::Logs::SubscriptionFilter"
    DependsOn: Ec2LambdaInvokePermission
    Properties: 
      DestinationArn: 
          Fn::GetAtt:
          - CWEc2LogsLambdaFunction
          - Arn
      FilterPattern: ""
      LogGroupName: 
        "Fn::Sub": "${AWS::StackName}-EC2Logs"
Outputs: 
 EC2Logs: 
  Description: "Cloudwatch log group for EC2 logs"
  Value: 
   Ref: EC2Logs
  Export: 
   Name: 
    "Fn::Sub": "${AWS::StackName}-EC2Logs"
